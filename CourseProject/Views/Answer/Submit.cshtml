@model TemplateSubmissionViewModel
@{
    ViewData["Title"] = Model.Title;
    bool isReadOnly = !User.Identity!.IsAuthenticated;
    bool isEditMode = Model.HasPreviouslyAnswered;
}

<div class="container py-5">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h2 class="mb-0">@Model.Title</h2>
        </div>
        <div class="card-body">
            @if (isReadOnly)
            {
                <div class="alert alert-info mb-4">
                    <i class="bi bi-info-circle me-2"></i>
                    <span data-i18n="TemplateReadOnlyMessage">You must be logged in to submit this form. You're viewing it in read-only mode.</span>
                </div>
            }
            @if (!string.IsNullOrEmpty(Model.Description))
            {
                <div class="mb-4">
                    <p class="lead">@Model.Description</p>
                </div>
            }
            <form method="post">
                <input type="hidden" name="templateId" value="@Model.TemplateId" />
                @for (int i = 0; i < Model.Forms.Count; i++)
                {
                    var form = Model.Forms[i];
                    <div class="card mb-4">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">
                                <span data-i18n="FormNumber" data-i18n-options='{"number": @(i + 1)}'></span>
                            </h5>
                        </div>
                        <div class="card-body">
                            <input type="hidden" name="[@i].FormId" value="@form.FormId" />
                            <input type="hidden" name="[@i].QuestionId" value="@form.Question.Id" />
                            <input type="hidden" name="[@i].QuestionType" value="@form.Question.Type" />
                            <div class="mb-3">
                                <label class="form-label fw-bold">@form.Question.Title</label>
                                @if (!string.IsNullOrEmpty(form.Question.Description))
                                {
                                    <p class="text-muted mb-3">@form.Question.Description</p>
                                }
                                @switch (form.Question.Type)
                                {
                                    case CourseProject.Entities.QuestionType.SingleLine:
                                        <input type="text" name="[@i].TextAnswer" class="form-control" required
                                               value="@form.Answer.TextAnswer"
                                               maxlength="@(form.Question.MaxLength ?? int.MaxValue)"
                                        @(isReadOnly ? "disabled" : "") />
                                        @if (form.Question.MaxLength != null)
                                        {
                                            <small class="text-muted">
                                                <span data-i18n="Validation.Maxlength" data-i18n-options='{"maxlength": @form.Question.MaxLength}'></span>
                                            </small>
                                        }
                                        break;
                                    case CourseProject.Entities.QuestionType.MultiLine:
                                        <textarea name="[@i].TextAnswer" class="form-control" rows="3" required
                                        @(isReadOnly ? "disabled" : "")>@form.Answer.TextAnswer</textarea>
                                        break;
                                    case CourseProject.Entities.QuestionType.Integer:
                                        <input type="number" name="[@i].TextAnswer" class="form-control" required
                                               min="@(form.Question.MinValue ?? int.MinValue)"
                                               max="@(form.Question.MaxValue ?? int.MaxValue)"
                                               value="@form.Answer.TextAnswer"
                                        @(isReadOnly ? "disabled" : "") />
                                        @if (form.Question.MinValue != null || form.Question.MaxValue != null)
                                        {
                                            <small class="text-muted">
                                                @if (form.Question.MinValue != null && form.Question.MaxValue != null)
                                                {
                                                    <span data-i18n="Validation.Range" data-i18n-options='{"min": @form.Question.MinValue, "max": @form.Question.MaxValue}'></span>
                                                }
                                                else if (form.Question.MinValue != null)
                                                {
                                                    <span data-i18n="Validation.Min" data-i18n-options='{"min": @form.Question.MinValue}'></span>
                                                }
                                                else if (form.Question.MaxValue != null)
                                                {
                                                    <span data-i18n="Validation.Max" data-i18n-options='{"max": @form.Question.MaxValue}'></span>
                                                }
                                            </small>
                                        }
                                        break;
                                    case CourseProject.Entities.QuestionType.Checkbox:
                                        @if (form.Options != null)
                                        {
                                            <div class="mt-2">
                                                @foreach (var option in form.Options)
                                                {
                                                    bool isChecked = form.Answer.SelectedOptions != null &&
                                                    form.Answer.SelectedOptions.Contains(option.Id);
                                                    <div class="form-check mb-2">
                                                        <input class="form-check-input" type="checkbox"
                                                               name="[@i].SelectedOptions" value="@option.Id"
                                                               id="option_@option.Id"
                                                        @(isReadOnly ? "disabled" : "")
                                                        @(isChecked ? "checked" : "")>
                                                        <label class="form-check-label" for="option_@option.Id">
                                                            @option.Text
                                                        </label>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        break;
                                }
                            </div>
                        </div>
                    </div>
                }
                <div class="d-flex justify-content-between">
                    <a href="javascript:history.back()" class="btn btn-secondary" data-i18n="Cancel">Cancel</a>
                    <button type="submit" class="btn btn-primary" disabled="@(isReadOnly)" data-i18n="@(isEditMode ? "UpdateAnswersButton" : "SubmitAnswerButton")">
                        @(isEditMode ? "Update Answers" : "Submit Answers")
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}